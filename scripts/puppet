#!/bin/bash

# Directory to store scripts on remote hosts.
readonly REMOTE_ROOT_DIR=/tmp/puppet

# Initializations

init_colors() {
  readonly COLOR_RESET=$(tput sgr0)
  readonly COLOR_RED=$(tput setaf 1)
  readonly COLOR_GREEN=$(tput setaf 2)
}

init_root_dir() {
  local source_path="${BASH_SOURCE[0]}"
  while [ -h "$source_path" ]; do
    cd "$(dirname "$source_path")" || {
      echo "${COLOR_RED}Fail to find root directory.${COLOR_RESET}" >&2
      exit 1
    }
    source_path="$(readlink "$source_path")"
  done
  readonly ROOT_DIR="$(cd -P "$(dirname "$source_path")/.." && pwd)"
  cd "$ROOT_DIR" || {
    echo "${COLOR_RED}Fail to change current directory to the root directory.${COLOR_RESET}" >&2
    exit 1
  }
}

init_rubygems() {
  export GEM_HOME="$ROOT_DIR/.gems"
  export GEM_PATH="$GEM_HOME"
  mkdir -p "$GEM_HOME"

  if gem environment --norc >/dev/null 2>&1; then
    readonly GEM_OPTIONS=(--norc)
  else
    # This `gem` doesn't support `--norc`, use `--config-file` instead.
    # See <https://github.com/rubygems/rubygems/pull/1329>.
    local -r config_file=$(mktemp)
    cat <<END_OF_CONFIG_FILE > "$config_file"
---
gemhome: "$GEM_HOME"
gempath:
  - "$GEM_PATH"
END_OF_CONFIG_FILE
    readonly GEM_OPTIONS=(--config-file "$config_file")
  fi
}

install_bundler() {
  gem list "${GEM_OPTIONS[@]}" -i bundler -v "~> 1.15.0" >/dev/null || {
    echo "${COLOR_GREEN}Install bundler...${COLOR_RESET}"
    gem install "${GEM_OPTIONS[@]}" --no-user-install --no-rdoc --no-ri bundler -v "~> 1.15.0"
  }
}

install_bundle() {
  "$GEM_HOME/bin/bundle" check >/dev/null || {
    echo "${COLOR_GREEN}Install bundle...${COLOR_RESET}"
    "$GEM_HOME/bin/bundle" install ${1:+"--with=$1"}
  }
}

init() {
  init_colors
  init_root_dir

  init_rubygems || {
    echo "${COLOR_RED}Fail to initialize rubygems.${COLOR_RESET}" >&2
    exit 1
  }

  install_bundler || {
    echo "${COLOR_RED}Fail to install bundler.${COLOR_RESET}" >&2
    exit 1
  }

  install_bundle "$@" || {
    echo "${COLOR_RED}Fail to install bundles.${COLOR_RESET}" >&2
    exit 1
  }
}

# Executions

wait_tcp_connection() {
  local count=1
  while ! nc -z "$1" "$2"; do
    count=$((count + 1))
    if (( count > 10 )); then
      echo "${COLOR_RED}Timeout waiting listening $1:$2${COLOR_RESET}" >&2
      return 1
    fi
    sleep 1
  done
}

run_puppet_master() {
  exec "$GEM_HOME/bin/bundle" exec puppet master --no-daemonize "$@" &
  readonly PUPPET_MASTER_PID="$!"

  echo "${COLOR_GREEN}Wait puppet master...${COLOR_RESET}"
  wait_tcp_connection localhost 8140
}

wait_puppet_master() {
  if [[ -n $PUPPET_MASTER_PID ]]; then
    echo "${COLOR_GREEN}Shutdown puppet master...${COLOR_RESET}"
    kill -TERM "$PUPPET_MASTER_PID"
    wait "$PUPPET_MASTER_PID"
  fi
}

prepare_remote() {
  echo "${COLOR_GREEN}Prepare remote host...${COLOR_RESET}"
  rsync -avz --delete \
    "$ROOT_DIR/Gemfile" \
    "$ROOT_DIR/Gemfile.lock" \
    "$ROOT_DIR/scripts" \
    "$1":"$REMOTE_ROOT_DIR"
}

check_remote_certificate() {
  echo "${COLOR_GREEN}Check remote certificate...${COLOR_RESET}"
  ssh "$1" "/usr/bin/env TERM=\"$TERM\" bash \"$REMOTE_ROOT_DIR/scripts/puppet\" -e \"$ENVIRONMENT\" fingerprint"
}

cleanup_signed_certificate() {
  echo "${COLOR_GREEN}Cleanup remote certificate...${COLOR_RESET}"
  # TODO: Better solution to get a certificate file name.
  # The certificate file name is not always given remote host name.
  rm "$ROOT_DIR/ssl/ca/signed/$1.pem"
}

run_puppet_agent_on_remote() {
  echo "${COLOR_GREEN}Run puppet agent on remote host...${COLOR_RESET}"
  ssh -R8140:localhost:8140 "$1" \
    "/usr/bin/env TERM=\"$TERM\" bash \"$REMOTE_ROOT_DIR/scripts/puppet\" -e \"$ENVIRONMENT\" agent"
}

# Commands

apply() {
  readonly REMOTE_HOST="$1"

  echo "${COLOR_GREEN}Puppet apply on ${REMOTE_HOST}...${COLOR_RESET}"

  init master

  prepare_remote "$REMOTE_HOST" || {
    echo "${COLOR_RED}Fail to prepare remote host.${COLOR_RESET}" >&2
    exit 1
  }

  check_remote_certificate "$REMOTE_HOST" || {
    cleanup_signed_certificate "$REMOTE_HOST" || {
      echo "${COLOR_RED}Fail to cleanup signed certificate.${COLOR_RESET}" >&2
      echo "${COLOR_RED}Puppet master may fail due to certificate mismatch.${COLOR_RESET}" >&2
    }
  }

  trap wait_puppet_master EXIT

  if run_puppet_master \
    --verbose \
    --certname=localhost \
    --autosign=true \
    --confdir=. \
    --environmentpath=environments \
    --vardir=var \
  ; then
    run_puppet_agent_on_remote "$REMOTE_HOST" || {
      echo "${COLOR_RED}Fail to run puppet agent on remote host.${COLOR_RESET}" >&2
      exit 1
    }
  fi
}

agent() {
  init agent

  exec sudo -E "$GEM_HOME/bin/bundle" exec puppet agent \
    --verbose \
    --no-daemonize \
    --onetime \
    --server=localhost \
    --environment="$ENVIRONMENT" \
    --waitforcert=5 \
    --confdir=. \
    --vardir=var
}

fingerprint() {
  init agent

  exec sudo -E "$GEM_HOME/bin/bundle" exec puppet agent \
    --environment="$ENVIRONMENT" \
    --confdir=. \
    --vardir=var \
    --fingerprint
}

print_usage() {
  echo "Usage: $0 [-e environment] [apply host | agent]"
  echo "  apply host  run puppet master and puppet agent on the host."
  echo "  agent       run puppet agent."
  echo "  fingerprint print puppet agent fingerprint if exists."
}

# Main

main() {
  # Puppet default environment is production.
  ENVIRONMENT=production

  while getopts e: OPT; do
    case "$OPT" in
      e)
        ENVIRONMENT="$OPTARG"
        ;;
      *)
        ;;
    esac
  done
  readonly ENVIRONMENT

  shift $((OPTIND - 1))

  case "$1" in
    apply)
      shift
      if [[ -z "$1" ]]; then
        print_usage
        exit 1
      fi
      apply "$@"
      ;;
    agent)
      shift
      agent "$@"
      ;;
    fingerprint)
      shift
      fingerprint "$@"
      ;;
    *)
      print_usage
      exit 1
      ;;
  esac
}

main "$@"
